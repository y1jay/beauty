// Generated by view binder compiler. Do not edit!
package com.yijun.beauty.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.yijun.beauty.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class OrderBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView textView;

  @NonNull
  public final TextView textView7;

  @NonNull
  public final TextView txtCancle;

  @NonNull
  public final TextView txtMenu;

  @NonNull
  public final TextView txtPayment;

  @NonNull
  public final TextView txtPrice;

  private OrderBinding(@NonNull LinearLayout rootView, @NonNull TextView textView,
      @NonNull TextView textView7, @NonNull TextView txtCancle, @NonNull TextView txtMenu,
      @NonNull TextView txtPayment, @NonNull TextView txtPrice) {
    this.rootView = rootView;
    this.textView = textView;
    this.textView7 = textView7;
    this.txtCancle = txtCancle;
    this.txtMenu = txtMenu;
    this.txtPayment = txtPayment;
    this.txtPrice = txtPrice;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static OrderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OrderBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.order, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OrderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      TextView textView = rootView.findViewById(R.id.textView);
      if (textView == null) {
        missingId = "textView";
        break missingId;
      }
      TextView textView7 = rootView.findViewById(R.id.textView7);
      if (textView7 == null) {
        missingId = "textView7";
        break missingId;
      }
      TextView txtCancle = rootView.findViewById(R.id.txt_cancle);
      if (txtCancle == null) {
        missingId = "txtCancle";
        break missingId;
      }
      TextView txtMenu = rootView.findViewById(R.id.txt_menu);
      if (txtMenu == null) {
        missingId = "txtMenu";
        break missingId;
      }
      TextView txtPayment = rootView.findViewById(R.id.txt_payment);
      if (txtPayment == null) {
        missingId = "txtPayment";
        break missingId;
      }
      TextView txtPrice = rootView.findViewById(R.id.txt_price);
      if (txtPrice == null) {
        missingId = "txtPrice";
        break missingId;
      }
      return new OrderBinding((LinearLayout) rootView, textView, textView7, txtCancle, txtMenu,
          txtPayment, txtPrice);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
